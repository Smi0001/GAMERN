{"version":3,"sources":["components/Loader.js","constants/tui-default-theme.js","constants/constants.js","actions/index.js","actions/ActionType.js","utils/google-image-utils.js","utils/api-utils.js","reduxStore/reducerState.js","reduxStore/index.js","utils/common-utils.js","components/ImageEditorWrapper.js","components/ModalsAlerts.js","components/NavMenu.js","components/ImageEditorContainer.js","settings.js","components/GalleryImage.js","components/GoogleImageResult.js","App.js","serviceWorker.js","index.js"],"names":["Loader","this","props","size","pulse","spin","icon","inverse","customClass","iconClass","className","React","Component","icona","require","iconb","iconc","icond","imageEditorConfig","defaultTheme","defaultTheme2","imageDefaultName","menuFeatures","initMenu","uiSize","height","menuBarPosition","cssMaxHeight","window","innerHeight","cssMaxWidth","innerWidth","selectionStyle","cornerSize","rotatingPointOffset","usageStatistics","imageSizeAllowed","MODALS","MENU_BAR_POSITION","UP","DOWN","LEFT","RIGHT","AppActions","searchString","type","payload","options","imageList","imageThumbnail","imageUrl","imageId","xtraImage","selectedImageURL","isBaseImageLoaded","openModalName","modalStateObjects","showXtraEditor","editorName","editorPosition","GOOGLE","GOOGLE_IMAGE_API","search","then","response","URL","getSearchResults","APIUtils","url","replace","JSON","stringify","axios","get","store","dispatch","catch","error","console","log","checkImageExists","imageURL","_this","xtraImageloading","useImageloading","getGoogleResultsFromUI","optionsObj","a","page","resultList","initialState","imageListloading","openImageSizeModal","xtraImageURL","openAdditionalImageAlertModal","imageSize","xtraImageSize","baseImageSize","xtraEditorPosition","baseEditorPosition","addMoreImageAlertStates","imageLoadModalStates","selectedImageId","resultCount","reducerState","prevState","action","length","imageStateObject","navMenuObject","rootReducer","combineReducers","createStore","UTILS","scrollToHiddenElementById","elementId","element","document","getElementById","k","setInterval","classList","contains","scrollIntoView","clearInterval","setTimeout","replaceClassFromElement","querySelector","potentialClassList","forEach","classItem","bodyClickButNotElementCallback","elementClass","callback","addEventListener","event","clickedElementClass","target","trim","passedElement","split","join","passedElementAsParent","closest","removeBodyClick","removeEventListener","getTruncateText","text","substr","download","ImageEditorWrapper","imageLoadWrapper","file","isImageValidInSize","componentId","state","originalLoadCode","imageEditorInst","getImageName","imageEditor","createRef","myTheme","menuBarPositionProp","bindImageLoadWrapperFn","prevProps","updatedProps","updateStateObject","toggleEditor","Object","keys","setState","overridingClass","values","current","ui","_actions","main","load","click","data","toDataURL","mimeType","extension","imageEditorProps","includeUI","loadImage","path","name","theme","menu","ref","id","ModalsAlerts","addEditedImageFn","openModal","String","width","color","onClick","closeModal","bind","fileSize","Number","parseFloat","toFixed","msgContent","closeImageLoadFailModal","isAddMoreImageAlert","isImageLoadFailModal","modalPosition","isOpen","toggle","frame","position","getXtraImageAlertJSX","getImageLoadFailJSX","connect","NavMenu","menuExpand","toggleMenuBarPosition","toggleClass","title","moveEditor","ImageEditorContainer","baseImageEditorRef","xtraImageEditorRef","baseNavMenuRef","xtraNavMenuRef","popupCloser","closeMenuBar","browseImage","files","showHideXtraEditor","saveImageToDisk","getCanvasSize","finallyAddEditedImage","addImageObject","dynamicClass","circle","checkCanvasSize","disabled","onChange","loadExtraEditor","accept","getXtraImageEditorJSX","SETTINGS","domainURL","graphqlURL","GalleryImage","useImage","imageTitle","stopPropagation","src","alt","searchedImageClick","GoogleImageResult","handleSearch","value","updateSearchString","keyCode","which","getImageList","isNextPage","currentPage","pageNo","updateSearchOptions","fetchPage","map","key","pageNum","Math","ceil","optionValue","getSelectedFilterTagsJSX","result","index","thumbnail","snippet","xl","lg","md","label","containerClass","onKeyUp","onIconClick","noResultsJSX","getImageResultJSX","client","ApolloClient","uri","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2d32adc3.chunk.js","sourcesContent":["import React from 'react'\nimport { MDBIcon } from 'mdbreact'\n\nclass Loader extends React.Component {\n\n    render() {\n        const { size, pulse, spin, icon, inverse, customClass, iconClass } = this.props\n        return (\n            <div className={\"loader-div center \" + (customClass?customClass:'')}>\n              <MDBIcon\n                className={iconClass?iconClass:'text-color-white'}\n                icon={icon?icon:'spinner'}\n                pulse={!!pulse}\n                spin={!!spin}\n                inverse={!!inverse}\n                size={size?size:'2x'}/>\n            </div>\n        )\n    }\n}\n\nexport default Loader","const icona = require('tui-image-editor/dist/svg/icon-a.svg')\nconst iconb = require('tui-image-editor/dist/svg/icon-b.svg')\nconst iconc = require('tui-image-editor/dist/svg/icon-c.svg')\nconst icond = require('tui-image-editor/dist/svg/icon-d.svg')\n\nconst defaultTheme = {\n    'menu.backgroundColor': 'white',\n    'common.backgroundColor': '#151515',\n    'menu.normalIcon.path': icond,\n    'menu.activeIcon.path': iconb,\n    'menu.disabledIcon.path': icona,\n    'menu.hoverIcon.path': iconc,\n    'submenu.backgroundColor': '#444242', //dark grey\n\n    // 'downloadButton.backgroundColor': 'white',\n    // 'downloadButton.borderColor': 'white',\n    // 'downloadButton.color': 'black',\n\n    // 'common.bi.image': 'https://uicdn.toast.com/toastui/img/tui-image-editor-bi.png',\n    // 'common.bisize.width': '251px',\n    // 'common.bisize.height': '21px',\n    // 'common.backgroundImage': 'none',\n    // // 'common.backgroundColor': '#1e1e1e',\n    // 'common.border': '0px',\n\n    // // header\n    // 'header.backgroundImage': 'none',\n    // 'header.backgroundColor': 'transparent',\n    // 'header.border': '0px',\n\n    // // load button\n    // 'loadButton.backgroundColor': '#fff',\n    // 'loadButton.border': '1px solid #ddd',\n    // 'loadButton.color': '#222',\n    // 'loadButton.fontFamily': '\\'Noto Sans\\', sans-serif',\n    // 'loadButton.fontSize': '12px',\n\n    // // download button\n    // 'downloadButton.backgroundColor': '#fdba3b',\n    // 'downloadButton.border': '1px solid #fdba3b',\n    // 'downloadButton.color': '#fff',\n    // 'downloadButton.fontFamily': '\\'Noto Sans\\', sans-serif',\n    // 'downloadButton.fontSize': '12px',\n\n    // // main icons\n    // 'menu.normalIcon.color': '#8a8a8a !important', //greyish-white\n    // 'menu.activeIcon.color': '#e9e9e9 !important', //whitish \n    // 'menu.disabledIcon.color': '#434343 !important', //greyish\n    // 'menu.hoverIcon.color': '#e9e9e9 !important', //whitish\n    // 'menu.iconSize.width': '24px',\n    // 'menu.iconSize.height': '24px',\n\n    // // submenu icons\n    // 'submenu.normalIcon.color': '#8a8a8a !important', //greyish-white\n    // 'submenu.activeIcon.color': '#e9e9e9 !important', //whitish\n    // 'submenu.iconSize.width': '32px',\n    // 'submenu.iconSize.height': '32px',\n\n    // // submenu primary color\n    // 'submenu.backgroundColor': '#444242', //dark grey\n    // 'submenu.partition.color': '#3c3c3c', //greyish\n\n    // // submenu labels\n    // 'submenu.normalLabel.color': '#8a8a8a', //greyish-white\n    // 'submenu.normalLabel.fontWeight': 'lighter',\n    // 'submenu.activeLabel.color': '#fff', //white\n    // 'submenu.activeLabel.fontWeight': 'lighter',\n\n    // // checkbox style\n    // 'checkbox.border': '0px',\n    // 'checkbox.backgroundColor': '#fff', //white\n\n    // // range style\n    // 'range.pointer.color': '#fff',\n    // 'range.bar.color': '#666',\n    // 'range.subbar.color': '#d1d1d1',\n\n    // 'range.disabledPointer.color': '#414141', //greyish\n    // 'range.disabledBar.color': '#282828', //blackish-grey\n    // 'range.disabledSubbar.color': '#414141', //greyish\n\n    // 'range.value.color': '#fff',\n    // 'range.value.fontWeight': 'lighter',\n    // 'range.value.fontSize': '11px',\n    // 'range.value.border': '1px solid #353535',\n    // 'range.value.backgroundColor': '#151515',\n    // 'range.title.color': '#fff',\n    // 'range.title.fontWeight': 'lighter',\n\n    // // colorpicker style\n    // 'colorpicker.button.border': '1px solid #1e1e1e',\n    // 'colorpicker.title.color': '#fff'\n}\n\nconst defaultTheme2 = {\n    'menu.backgroundColor': 'white',\n    'common.backgroundColor': '#e9e9e9',\n    'menu.normalIcon.path': icond,\n    'menu.activeIcon.path': iconb,\n    'menu.disabledIcon.path': icona,\n    'menu.hoverIcon.path': iconc,\n    'submenu.backgroundColor': '#444242', //dark grey\n}\n\nexport {\n    defaultTheme,\n    defaultTheme2\n}","import { defaultTheme, defaultTheme2 } from './tui-default-theme'\n\nexport const BYTES_TO_MB_DIVIDER = 1000000\nexport const INTENTIONAL_NULL_VALUE = null // unintentional vallue is set as undefined\nexport const EMPTY_STRING = ''\nexport const BASE = 'base'\nexport const XTRA = 'xtra'\n\nexport const imageEditorConfig = {\n    defaultTheme,\n    defaultTheme2,\n    imageDefaultName: 'image',\n    menuFeatures: ['crop', 'flip', 'rotate', 'draw', 'shape', 'text', 'filter'],\n    initMenu: '',\n    uiSize: {\n        height: `calc(100vh - 160px)`,\n    },\n    menuBarPosition: 'bottom',\n    cssMaxHeight: window.innerHeight,\n    cssMaxWidth: window.innerWidth,\n    selectionStyle: {\n        cornerSize: 20,\n        rotatingPointOffset: 70,\n    },\n    usageStatistics: false,\n    imageSizeAllowed: (6 * BYTES_TO_MB_DIVIDER), // 6MB\n}\n\nexport const MODALS = {\n    addMoreImageAlert: 'addMoreImageAlert',\n    imageLoadFail: 'imageLoadFail',\n    addImageEditor: 'addImageEditor',\n}\n\nexport const MENU_BAR_POSITION = {\n    UP: 'top',\n    DOWN: 'bottom',\n    LEFT: 'left',\n    RIGHT: 'right'\n}\n","import * as actionType from './ActionType';\nimport { INTENTIONAL_NULL_VALUE } from '../constants/constants';\n\nexport const AppActions = {\n\n\tupdateSearchString: (searchString) => {\n\t\treturn {\n\t\t\ttype: actionType.UPDATE_SEARCH_STRING,\n\t\t\tpayload: {\n\t\t\t\tsearchString,\n\t\t\t}\n\t\t}\n\t},\n\n\tupdateSearchOptions: (options) => {\n\t\treturn {\n\t\t\ttype: actionType.UPDATE_SEARCH_OPTIONS,\n\t\t\tpayload: {\n\t\t\t\toptions,\n\t\t\t}\n\t\t}\n\t},\n\n\tgetImageList: (searchString, options) => {\n\t\treturn {\n\t\t\ttype: actionType.GET_IMAGE_LIST,\n\t\t\tpayload: {\n\t\t\t\tsearchString,\n\t\t\t\toptions,\n\t\t\t}\n\t\t}\n\t},\n\n\tsetImageList: (imageList) => {\n\t\treturn {\n\t\t\ttype: actionType.SET_IMAGE_LIST,\n\t\t\tpayload: {\n\t\t\t\timageList,\n\t\t\t}\n\t\t}\n\t},\n\n\tuseImage: (imageThumbnail, imageUrl, imageId, xtraImage) => {\n\t\treturn {\n\t\t\ttype: actionType.USE_IMAGE,\n\t\t\tpayload: {\n\t\t\t\timageThumbnail,\n\t\t\t\timageUrl,\n\t\t\t\timageId,\n\t\t\t\txtraImage,\n\t\t\t}\n\t\t}\n\t},\n\n\tloadSelectedImageURL: (selectedImageURL, xtraImage) => {\n\t\treturn {\n\t\t\ttype: actionType.LOAD_SELECTED_IMAGE_URL,\n\t\t\tpayload: {\n\t\t\t\tselectedImageURL,\n\t\t\t\txtraImage,\n\t\t\t}\n\t\t}\n\t},\n\n\tsetIsBaseImageLoadStatus: (isBaseImageLoaded) => {\n\t\treturn {\n\t\t\ttype: actionType.SET_IS_IMAGE_LOADED,\n\t\t\tpayload: {\n\t\t\t\tisBaseImageLoaded,\n\t\t\t}\n\t\t}\n\t},\n\n\topenModal: (\n\t\topenModalName,\n\t\tmodalStateObjects,\n\t) => {\n\t\treturn {\n\t\t\ttype: actionType.OPEN_MODAL,\n\t\t\tpayload: {\n\t\t\t\topenModalName: openModalName || INTENTIONAL_NULL_VALUE,\n\t\t\t\t...modalStateObjects || {},\n\t\t\t}\n\t\t}\n\t},\n\n\tshowHideXtraEditor: (showXtraEditor) => {\n\t\treturn {\n\t\t\ttype: actionType.TOGGLE_XTRA_EDITOR,\n\t\t\tpayload: {\n\t\t\t\tshowXtraEditor,\n\t\t\t}\n\t\t}\n\t},\n\n\tsetMenuBarPosition: (editorName, editorPosition) => {\n\t\treturn {\n\t\t\ttype: actionType.SET_MENU_BAR_POSITION,\n\t\t\tpayload: {\n\t\t\t\teditorName,\n\t\t\t\teditorPosition,\n\t\t\t}\n\t\t}\n\t},\n\n}\n","export const GET_IMAGE_LIST = 'GET_IMAGE_LIST'\nexport const SET_IMAGE_LIST = 'SET_IMAGE_LIST'\nexport const UPDATE_SEARCH_STRING = 'UPDATE_SEARCH_STRING'\nexport const UPDATE_SEARCH_OPTIONS = 'UPDATE_SEARCH_OPTIONS'\nexport const USE_IMAGE = 'USE_IMAGE'\nexport const LOAD_SELECTED_IMAGE_URL = 'LOAD_SELECTED_IMAGE_URL'\nexport const SET_IS_IMAGE_LOADED = 'SET_IS_IMAGE_LOADED'\nexport const OPEN_MODAL = 'OPEN_MODAL'\nexport const OPEN_IMAGE_ALERT_MODAL = 'OPEN_IMAGE_ALERT_MODAL'\nexport const USE_ADDED_IMAGE_AS_OBJECT = 'USE_ADDED_IMAGE_AS_OBJECT'\nexport const TOGGLE_XTRA_EDITOR = 'TOGGLE_XTRA_EDITOR'\nexport const SET_MENU_BAR_POSITION = 'SET_MENU_BAR_POSITION'\n","// google image search setup\nconst GOOGLE_SEARCH_IMAGES = require('image-search-google')\n// cseID https://cse.google.com/cse/setup/basic?cx=004973649819293208902%3Akfq78axqpes\nconst CSE_ID = '004973649819293208902:kfq78axqpes'\n// gAPI key https://console.developers.google.com/apis/credentials?project=maximal-quanta-173719\nconst G_API_KEY = 'AIzaSyDFArRGA3jheuBJbVCdeOpL2WsAyo0ybrk'\nconst GOOGLE = new GOOGLE_SEARCH_IMAGES(CSE_ID, G_API_KEY)\nconst GOOGLE_IMAGE_API = (searchString, options) => GOOGLE.search(searchString, options).then(response => response)\nexport default GOOGLE_IMAGE_API\n","import axios from 'axios'\nimport { AppActions } from '../actions';\nimport store from '../reduxStore'\nimport { MODALS, INTENTIONAL_NULL_VALUE } from '../constants/constants'\nimport GOOGLE_IMAGE_API from './google-image-utils'\nconst baseUrl = 'http://localhost:4000/'\n\nconst URL = {\n    getSearchResults: `search?q=searchString&options=optionsObject`,\n}\n\nconst APIUtils = {\n    getSearchResults: (searchString, options) => {\n        const url = baseUrl\n            +   URL.getSearchResults\n            .replace('searchString', searchString)\n            .replace('optionsObject', JSON.stringify(options))\n        axios.get(url)\n        .then(response => {\n            store.dispatch(\n                AppActions.setImageList(response)\n            )\n        })\n        .catch(error => console.log(error))\n    },\n\n    // first checks for imageURL(higher dimension)\n    // if fails then checks for imageThumbnail(smaller dimension)\n    // if still fails displays alert modal\n    checkImageExists: function(imageThumbnail, imageURL, xtraImage) {\n        const _this = this\n        axios.get(imageURL)\n        .then(() => {\n            store.dispatch(\n                AppActions.loadSelectedImageURL(imageURL, xtraImage)\n            )\n        })\n        .catch(error => {\n            console.log('could not fetch imageURL', error)\n            imageThumbnail\n            ?\n                _this.checkImageExists(INTENTIONAL_NULL_VALUE, imageThumbnail, xtraImage)\n            :\n                store.dispatch(\n                    AppActions.openModal(\n                        MODALS.imageLoadFail,\n                        {\n                            xtraImageloading: false,\n                            useImageloading: false\n                        }\n                    )\n                )\n        })\n    },\n\n    getGoogleResultsFromUI: async (searchString, optionsObj) => {\n        // parameter page is actually startIndex\n        const options = optionsObj ? optionsObj : { page: 1 }\n        try {\n            const resultList = await GOOGLE_IMAGE_API(searchString, options)\n            resultList &&\n                store.dispatch(\n                    AppActions.setImageList(resultList)\n                )\n        } catch (error) {\n            console.log('Error in getGoogleResultsFromUI:', error)\n        }\n    },\n\n}\n\nexport default APIUtils","import * as actionType from '../actions/ActionType';\nimport APIUtils from '../utils/api-utils'\nimport { EMPTY_STRING, INTENTIONAL_NULL_VALUE, BASE, imageEditorConfig } from '../constants/constants';\n\nconst initialState = {\n    searchString: EMPTY_STRING,\n    imageList: [],\n    imageListloading: false,\n    isBaseImageLoaded: false,\n    openImageSizeModal: false,\n    useImageloading: false,\n    xtraImageloading: false,\n    showXtraEditor: false,\n    selectedImageURL: INTENTIONAL_NULL_VALUE,\n    xtraImageURL: INTENTIONAL_NULL_VALUE,\n    openAdditionalImageAlertModal: false,\n    openModalName: INTENTIONAL_NULL_VALUE,\n    imageSize: INTENTIONAL_NULL_VALUE,\n    xtraImageSize: {},\n    baseImageSize: {},\n    xtraEditorPosition: imageEditorConfig.menuBarPosition,\n    baseEditorPosition: imageEditorConfig.menuBarPosition,\n    addMoreImageAlertStates: {},\n    imageLoadModalStates: {},\n    selectedImageId: INTENTIONAL_NULL_VALUE,\n    resultCount: 0,\n    options: {\n        page: 1,\n    }\n}\n\n\nconst reducerState = (prevState = {}, action) => {\n\n    switch (action.type) {\n\n        case actionType.UPDATE_SEARCH_STRING: {\n            let {\n                searchString,\n            } = action.payload\n            return {\n                ...prevState,\n                searchString,\n            }\n        }\n\n        case actionType.UPDATE_SEARCH_OPTIONS: {\n            let {\n                options\n            } = action.payload\n            return {\n                ...prevState,\n                options,\n            }\n        }\n\n        case actionType.GET_IMAGE_LIST: {\n            let {\n                searchString,\n                options\n            } = prevState\n            // APIUtils.getSearchResults(\n            //     searchString,\n            //     options\n            // )\n            APIUtils.getGoogleResultsFromUI(\n                searchString,\n                options\n            )\n            return {\n                ...prevState,\n                imageList: [],\n                imageListloading: true,\n            }\n        }\n        \n        case actionType.SET_IMAGE_LIST: {\n            let {\n                imageList\n            } = action.payload\n            return  {\n                ...prevState,\n                imageList,\n                imageListloading: false,\n                resultCount: imageList.length,\n                selectedImageId: null,\n            }\n        }\n\n        case actionType.USE_IMAGE: {\n            let {\n                imageThumbnail,\n                imageUrl,\n                imageId,\n                xtraImage\n            } = action.payload\n            APIUtils.checkImageExists(imageThumbnail, imageUrl, xtraImage)\n            let imageStateObject = {\n                selectedImageId: imageId,\n            }\n            if (xtraImage) {\n                imageStateObject.xtraImageloading = true\n                imageStateObject.showXtraEditor = true\n            } else {\n                imageStateObject.useImageloading = true\n                imageStateObject.showXtraEditor = false\n            }\n            return  {\n                ...prevState,\n                ...imageStateObject,\n            }\n        }\n\n        case actionType.LOAD_SELECTED_IMAGE_URL: {\n            let {\n                selectedImageURL,\n                xtraImage\n            } = action.payload\n            const imageStateObject = {}\n            if (xtraImage) {\n                imageStateObject.xtraImageURL = selectedImageURL\n                imageStateObject.xtraImageloading = false\n                imageStateObject.showXtraEditor = true\n            } else {\n                imageStateObject.selectedImageURL = selectedImageURL\n                imageStateObject.useImageloading = false\n                imageStateObject.isBaseImageLoaded = true\n                imageStateObject.showXtraEditor = false\n            }\n            return  {\n                ...prevState,\n                ...imageStateObject,\n            }\n        }\n\n        case actionType.SET_IS_IMAGE_LOADED: {\n            let {\n                isBaseImageLoaded,\n            } = action.payload\n            return {\n                ...prevState,\n                isBaseImageLoaded,\n            }\n        }\n\n        case actionType.OPEN_MODAL: {\n            return {\n                ...prevState,\n                ...action.payload,\n            }\n        }\n\n        case actionType.TOGGLE_XTRA_EDITOR: {\n            let {\n                showXtraEditor\n            } = action.payload\n            return {\n                ...prevState,\n                showXtraEditor,\n            }\n        }\n\n        case actionType.SET_MENU_BAR_POSITION: {\n            let {\n                editorName,\n                editorPosition\n            } = action.payload\n            let navMenuObject = {}\n            if (editorName === BASE) {\n                navMenuObject.baseEditorPosition = editorPosition\n            } else {\n                navMenuObject.xtraEditorPosition = editorPosition\n            }\n            return {\n                ...prevState,\n                ...navMenuObject,\n            }\n        }\n\n        default:\n            return {...initialState}\n    }\n}\n\nexport default reducerState;","import {\n    combineReducers,\n    createStore,\n    // applyMiddleware\n} from 'redux';\nimport reducerState from './reducerState';\n// import thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    reducerState,\n});\nconst store = createStore(\n    rootReducer,\n    // applyMiddleware(thunk)\n)\nexport default store\n","const UTILS = {\n\n    scrollToHiddenElementById: (elementId) => {\n        var element = document.getElementById(elementId)\n        var fn = () => {\n            if (element && !element.classList.contains('hidden')) {\n                element.scrollIntoView()\n                clearInterval(k)\n            }\n        }\n        var k = setInterval(fn, 400)\n        setTimeout(() => {\n            clearInterval(k)\n        }, 5000)\n    },\n\n    replaceClassFromElement: (\n        querySelector, className, potentialClassList\n    ) => {\n        const element = document.querySelector(querySelector)\n        if (element) {\n            potentialClassList.forEach( classItem => {\n                if (element.classList.contains(classItem)) { //TODO: condition to exit loop once condition is met\n                    element.classList.replace(classItem, className)\n                    return false\n                }\n            });\n        }\n    },\n\n    bodyClickButNotElementCallback: (elementClass, callback) => {\n        document.addEventListener('click', function(event){\n            // console.log('clicked', event.target)\n            const clickedElementClass = typeof event.target.className === \"string\" && event.target.className.trim()\n            if (clickedElementClass) {\n                const passedElement = document.querySelector(`.${clickedElementClass.split(' ').join('.')}`)\n                if (passedElement) {\n                    // console.log('passsedElement', passedElement)\n                    const passedElementAsParent = passedElement.closest(elementClass)\n                    if (passedElementAsParent && (\n                        passedElementAsParent.classList.contains('nav-menu')\n                        || passedElementAsParent.classList.contains(elementClass)\n                    )) {\n                        // console.log('condition true', passedElementAsParent)\n                        return false\n                    }\n                }\n            }\n            callback && callback()\n        })\n    },\n    removeBodyClick: () => {\n        document.removeEventListener && document.removeEventListener('click')\n    },\n    getTruncateText(text) {\n        const textString = text ? text : 'Title not available'\n        return textString.substr(0, 20)+'...'\n    }\n\n}\n\nexport default UTILS","import React from 'react'\nimport ImageEditor from \"@toast-ui/react-image-editor\";\nimport store from '../reduxStore';\nimport { AppActions } from '../actions';\nimport {\n    imageEditorConfig,\n    MODALS,\n    XTRA,\n    MENU_BAR_POSITION,\n} from '../constants/constants';\nimport UTILS from '../utils/common-utils';\nconst download = require(\"downloadjs\")\n\nconst {\n    defaultTheme,\n    imageDefaultName,\n    menuFeatures,\n    initMenu,\n    uiSize,\n    menuBarPosition,\n    cssMaxHeight,\n    cssMaxWidth,\n    selectionStyle,\n    usageStatistics,\n    imageSizeAllowed,\n} = imageEditorConfig\n\nclass ImageEditorWrapper extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.imageEditor = React.createRef()\n        this.state = {\n            selectedImageURL: props.selectedImageURL,\n            myTheme: props.myTheme,\n            componentId: props.componentId,\n            menuBarPositionProp: props.menuBarPositionProp,\n        }\n    }\n\n    componentDidMount() {\n        this.bindImageLoadWrapperFn()\n    }\n\n    componentDidUpdate(prevProps) {\n        const updatedProps = this.props\n        const updateStateObject = {}\n        if (updatedProps.selectedImageURL !== prevProps.selectedImageURL) {\n            updateStateObject.selectedImageURL = updatedProps.selectedImageURL\n        }\n        if (updatedProps.menuBarPositionProp !== prevProps.menuBarPositionProp) {\n            this.toggleEditor(updatedProps)\n        }\n        if (Object.keys(updateStateObject).length > 0) {\n            this.setState(\n                {...updateStateObject}\n            )\n        }\n    }\n\n    toggleEditor(props) {\n        const querySelector = `#tui-image-editor-${props.componentId}>.tui-image-editor-container`\n        const overridingClass =  props.menuBarPositionProp\n        UTILS.replaceClassFromElement(\n            querySelector,\n            overridingClass,\n            Object.values(MENU_BAR_POSITION)\n        )\n    }\n    isImageValidInSize(file) {\n        return file.size <= imageSizeAllowed\n    }\n    imageLoadWrapper = file => {\n        let isBaseImageLoaded = !!file\n        if (isBaseImageLoaded) {\n            if (this.isImageValidInSize(file)) {\n                if (this.props.componentId === XTRA) {\n                    UTILS.scrollToHiddenElementById('xtra-image')\n                } else {\n                    UTILS.scrollToHiddenElementById('cream-your-meme')\n                }\n                this.state.originalLoadCode(file)\n            } else {\n                store.dispatch(\n                    AppActions.openModal(\n                        MODALS.imageLoadFail,\n                        { imageSize: file.size }\n                    )\n                )\n            }\n        } else { // file already selected\n            isBaseImageLoaded = !!this.state.imageEditorInst.getImageName()\n        }\n        store.dispatch(AppActions.setIsBaseImageLoadStatus(isBaseImageLoaded))\n    }\n\n    bindImageLoadWrapperFn() {\n        const imageEditorInst = this.imageEditor.current.imageEditorInst\n        this.setState({\n            imageEditorInst,\n            originalLoadCode: imageEditorInst.ui._actions.main.load,\n        },\n        () => imageEditorInst.ui._actions.main.load = this.imageLoadWrapper\n        )\n    }\n\n    browseImage() {\n        document.querySelector('input.tui-image-editor-load-btn').click()\n    }\n\n    saveImageToDisk() {\n        const { imageEditorInst } = this.state\n        const data = imageEditorInst.toDataURL()\n        if (data) {\n            const mimeType = data.split(\";\")[0];\n            const extension = data.split(\";\")[0].split(\"/\")[1];\n            download(data, `image.${extension}`, mimeType);\n            // send the data to DB it can be restored and used as source for img tag\n            //sessionStorage.setItem('image', data)\n        }\n    }\n    render() {\n        const { myTheme, componentId } = this.state\n        const imageEditorProps = {\n            includeUI: {\n                loadImage: {\n                    path: this.state.selectedImageURL,\n                    name: imageDefaultName,\n                },\n                theme: myTheme ? myTheme : defaultTheme,\n                menu: menuFeatures,\n                initMenu,\n                uiSize,\n                menuBarPosition,\n            },\n            cssMaxHeight,\n            cssMaxWidth,\n            selectionStyle,\n            usageStatistics,\n            ref: this.imageEditor,\n        }\n        return (\n            <div id={\"tui-image-editor-\" + componentId}>\n                <ImageEditor {...imageEditorProps} />\n            </div>\n        )\n    }\n}\n\nexport default ImageEditorWrapper","import React from \"react\";\nimport \"tui-image-editor/dist/tui-image-editor.css\";\nimport {\n\tMDBBtn,\n\tMDBModal,\n\tMDBModalBody,\n\tMDBIcon,\n\tMDBContainer,\n\tMDBCol\n} from \"mdbreact\";\nimport { connect } from \"react-redux\";\nimport { AppActions } from \"../actions\";\nimport { MODALS, INTENTIONAL_NULL_VALUE, BYTES_TO_MB_DIVIDER, } from \"../constants/constants\";\n\nclass ModalsAlerts extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.addEditedImageFn = props.addEditedImageFn\n\t}\n\tcloseModal(modalStateObjects) {\n\t\tthis.props.openModal(\n\t\t\tINTENTIONAL_NULL_VALUE,\n\t\t\tmodalStateObjects\n\t\t)\n\t}\n\n\tgetXtraImageAlertJSX(\n\t\txtraImageSize,\n\t\t baseImageSize) {\n\t\treturn (\n\t\t\t<MDBModalBody className=\"text-left\">\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBCol>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<MDBIcon icon=\"exclamation-triangle\" className=\"text-color-yellow mr-2\"/>\n\t\t\t\t\t\t\t<strong><i> You are going to overflow the cream on your cone</i></strong>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tI mean the edited image { `(${String(xtraImageSize.width)} x ${String(xtraImageSize.height)}) ` }\n\t\t\t\t\t\t\tis still bigger than the bottom canvas { `(${String(baseImageSize.width)} x ${String(baseImageSize.height)})` }. \n\t\t\t\t\t\t\tYou may find it difficult in handling. \n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div><strong>Tips :</strong></div>\n\t\t\t\t\t\t<ul className=\"text-left\">\n\t\t\t\t\t\t\t<li><b>Crop</b> the image more</li>\n\t\t\t\t\t\t\t<li>Continue and drag down the image to find its corner and resize it</li>\n\t\t\t\t\t\t\t<li><b>Undo</b>/<b>Delete</b> one-by-one</li>\n\t\t\t\t\t\t\t<li>Restart with bigger bottom image</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</MDBCol>\n\t\t\t\t</MDBContainer>\n\t\t\t\t<MDBContainer className=\"text-center\">\n\t\t\t\t\t<MDBBtn color=\"default\" className=\"text-trans-none\" onClick={this.closeModal.bind(this, { })}>\n\t\t\t\t\t\t<span>Back to edit</span>\n\t\t\t\t\t\t<MDBIcon icon=\"edit\" className=\"text-color-secondary ml-2\" />\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t<MDBBtn color=\"secondary\" onClick={this.addEditedImageFn} className=\"text-trans-none\">\n\t\t\t\t\t\t<span>Add it anyway</span>\n\t\t\t\t\t\t<MDBIcon icon=\"check\" className=\"text-color-green ml-2\"/>\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t</MDBContainer>\n\t\t\t</MDBModalBody>\n\n\t\t)\n\t}\n\n\tcloseImageLoadFailModal() {\n\t\tlet modalStateObjects = {\n\t\t\tshowXtraEditor: false,\n\t\t\timageSize: INTENTIONAL_NULL_VALUE,\n\t\t}\n\t\tconst { showXtraEditor } = this.props\n\t\tif (!showXtraEditor) {\n\t\t\tmodalStateObjects.isBaseImageLoaded = false // set isBaseImageLoaded = false\n\t\t}\n\t\tthis.closeModal(modalStateObjects)\n\t}\n\tgetImageLoadFailJSX(imageSize) {\n\t\tlet fileSize = 0\n\t\tif (imageSize) {\n\t\t\tfileSize = Number.parseFloat(imageSize/BYTES_TO_MB_DIVIDER).toFixed(2)\n\t\t}\n\t\tconst msgContent = `The image is not able to load due to ${\n\t\t\timageSize\n\t\t\t?\n\t\t\t\t`size ${fileSize} MB, where upload size limit 6 MB`\n\t\t\t:\n\t\t\t\t'some server error'\n\t\t}.`\n\t\treturn (\n\t\t\t<MDBModalBody className=\"text-center\">\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<MDBIcon icon=\"exclamation-triangle\" className=\"text-color-red mr-2\"/>\n\t\t\t\t\t\t<strong>Sorry! <i>{msgContent}</i></strong>\n\t\t\t\t\t</p>\n\t\t\t\t</MDBContainer>\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBBtn color=\"secondary\"\n\t\t\t\t\t\tonClick={this.closeImageLoadFailModal.bind(this)}\n\t\t\t\t\t>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t</MDBContainer>\n\t\t\t</MDBModalBody>\n\t\t)\n\t}\n\n  \trender() {\n\t\tconst {\n\t\t\topenModalName,\n\t\t\txtraImageSize,\n\t\t\tbaseImageSize,\n\t\t\timageSize,\n\t\t} = this.props\n\t\tconst isAddMoreImageAlert = openModalName === MODALS.addMoreImageAlert && !!(xtraImageSize && xtraImageSize.width)\n\t\tconst isImageLoadFailModal = openModalName === MODALS.imageLoadFail\n\t\tconst modalPosition = isAddMoreImageAlert || isImageLoadFailModal ? 'top' : 'center'\n\n\t\treturn (\n\t\t\t<MDBModal\n\t\t\t\tisOpen={isAddMoreImageAlert || isImageLoadFailModal}\n\t\t\t\ttoggle={this.closeModal.bind(this)} frame position={modalPosition}\n\t\t\t>\n\t\t\t\t{ isAddMoreImageAlert && this.getXtraImageAlertJSX(\n\t\t\t\t\txtraImageSize, baseImageSize\n\t\t\t\t)}\n\t\t\t\t{ isImageLoadFailModal && this.getImageLoadFailJSX(imageSize) }\n\t\t\t</MDBModal>\n\t\t)\n\t}\n}\n\nexport default connect(\n  // mapStatesToProps\n\tstate => {\n\t\treturn {\n\t\t\topenModalName: state.reducerState.openModalName,\n\t\t\timageSize: state.reducerState.imageSize,\n\t\t\txtraImageSize: state.reducerState.xtraImageSize,\n\t\t\tbaseImageSize: state.reducerState.baseImageSize,\n\t\t\tshowXtraEditor: state.reducerState.showXtraEditor,\n\t\t}\n  \t},\n  // mapDispatchToProps\n\tdispatch => {\n\t\treturn {\n\t\t\topenModal: (\n\t\t\t\topenModalName,\n\t\t\t\tmodalStateObjects\n\t\t\t) => {\n\t\t\t\tdispatch(\n\t\t\t\t\tAppActions.openModal(\n\t\t\t\t\t\topenModalName,\n\t\t\t\t\t\tmodalStateObjects\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t},\n\t\t}\n\t}\n)(ModalsAlerts);","import React from 'react'\nimport { MENU_BAR_POSITION, imageEditorConfig } from '../constants/constants'\nimport {\n    MDBIcon,\n\tMDBPopoverHeader,\n} from \"mdbreact\";\nimport store from '../reduxStore'\nimport { AppActions } from '../actions'\n\nclass NavMenu extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            editorName: props.editorName,\n            menuExpand: false,\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const updatedProps = this.props\n        if (updatedProps.selectedImageURL !== prevProps.selectedImageURL) {\n            this.setState({\n                selectedImageURL: updatedProps.selectedImageURL\n            })\n        }\n    }\n    closeMenuBar() {\n        if(this.state.menuExpand) {\n            this.setState({\n                menuExpand: false\n            }, console.log('closed'))\n        }\n    }\n    toggleMenuBarPosition() {\n        const { menuExpand } = this.state\n        this.setState({\n            menuExpand: !menuExpand\n        })\n    }\n    moveEditor(editorName, editorPosition) {\n        store.dispatch(\n            AppActions.setMenuBarPosition(\n                editorName,\n                editorPosition\n            )\n        )\n        // as the state change is not going to be an async call we can directly toggle back here\n        // instead of calling it in callback, in case when we will store this activity in user's DB\n        // then we need to call this toggle after the async call completes\n        this.toggleMenuBarPosition()\n    }\n\n    render() {\n        const { editorName, menuExpand } = this.state\n        const toggleClass = menuExpand?'expand':''\n        return (            \n            <div title=\"Editor Nav Menu\" className=\"nav-menu\" onClick={this.toggleMenuBarPosition.bind(this)} >\n                <MDBIcon icon=\"ellipsis-v\" className=\"\" />\n                <div className={'nav-menu-hidden ' + toggleClass}>\n                    {/* <label >Menu bar position</label> */}\n                    <MDBPopoverHeader>Menu bar position</MDBPopoverHeader>\n                    <ul>\n                        <li onClick={this.moveEditor.bind(this, editorName, imageEditorConfig.menuBarPosition)}>\n                            <MDBIcon icon=\"undo\" className=\"nav-menu-icons\" />\n                            <span>Reset</span>\n                        </li>\n                        <li onClick={this.moveEditor.bind(this, editorName, MENU_BAR_POSITION.UP)}>\n                            <MDBIcon icon=\"arrow-up\" className=\"nav-menu-icons\" />\n                            <span>Move to Up</span>\n                        </li>\n                        <li onClick={this.moveEditor.bind(this, editorName, MENU_BAR_POSITION.DOWN)}>\n                            <MDBIcon icon=\"arrow-down\" className=\"nav-menu-icons\" />\n                            <span>Move to Down</span>\n                        </li>\n                        <li onClick={this.moveEditor.bind(this, editorName, MENU_BAR_POSITION.LEFT)}>\n                            <MDBIcon icon=\"arrow-left\" className=\"nav-menu-icons\" />\n                            <span>Move to Left</span>\n                        </li>\n                        <li onClick={this.moveEditor.bind(this, editorName, MENU_BAR_POSITION.RIGHT)}>\n                            <MDBIcon icon=\"arrow-right\" className=\"nav-menu-icons\" />\n                            <span>Move to Right</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavMenu","import React from \"react\";\nimport \"tui-image-editor/dist/tui-image-editor.css\";\nimport {\n\tMDBRow,\n\tMDBBtn,\n\tMDBModalBody,\n\tMDBIcon,\n\tMDBContainer,\n} from \"mdbreact\";\nimport Loader from './Loader'\nimport { connect } from \"react-redux\";\nimport { AppActions } from \"../actions\";\nimport ImageEditorWrapper from \"./ImageEditorWrapper\";\nimport { MODALS, INTENTIONAL_NULL_VALUE, BASE, XTRA, imageEditorConfig } from \"../constants/constants\";\nimport ModalsAlerts from \"./ModalsAlerts\";\nimport NavMenu from \"./NavMenu\";\nimport UTILS from \"../utils/common-utils\";\n\nclass ImageEditorContainer extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.baseImageEditorRef = React.createRef()\n\t\tthis.xtraImageEditorRef = React.createRef()\n\t\tthis.baseNavMenuRef = React.createRef()\n\t\tthis.xtraNavMenuRef = React.createRef()\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.popupCloser()\n\t}\n\tpopupCloser() {\n\t\tconst closeOpenedMenuBarFn = () => {\n\t\t\tthis.baseNavMenuRef.current && this.baseNavMenuRef.current.closeMenuBar()\n\t\t\tthis.xtraNavMenuRef.current && this.xtraNavMenuRef.current.closeMenuBar()\n\t\t}\n\t\tUTILS.bodyClickButNotElementCallback('.nav-menu', closeOpenedMenuBarFn)\n\t}\n\tcomponentWillUnmount() {\n\t\tUTILS.removeBodyClick()\n\t}\n\tcloseModal() {\n\t\tthis.props.closeModal()\n\t}\n\n\tbrowseImage() {\n\t\tconst baseImageEditorRef = this.baseImageEditorRef.current\n\t\tif (baseImageEditorRef) {\n\t\t\tbaseImageEditorRef.browseImage()\n\t\t}\n\t}\n\n\tloadExtraEditor(event) {\n\t// sometimes browsing file and selecting fails and did not return anything\n\t\tconst files = event.target.files\n        if (files.length > 0) {\n\t\t\tthis.props.showHideXtraEditor(true)\n\t\t\tconst xtraImageEditorRef = this.xtraImageEditorRef.current\n\t\t\tif (xtraImageEditorRef) {\n\t\t\t\txtraImageEditorRef.imageLoadWrapper(event.target.files[0])\n\t\t\t}\n\t\t}\n\t}\n\n\tsaveImageToDisk() {\n\t\tconst baseImageEditorRef = this.baseImageEditorRef.current\n\t\tif (baseImageEditorRef) {\n\t\t\tbaseImageEditorRef.saveImageToDisk()\n\t\t}\n\t}\n\tcheckCanvasSize() {\n\t\tlet xtraImageSize = this.xtraImageEditorRef.current.imageEditor.current.imageEditorInst.getCanvasSize()\n\t\tconst baseImageSize = this.baseImageEditorRef.current.imageEditor.current.imageEditorInst.getCanvasSize()\n\t\tif (xtraImageSize && xtraImageSize.width > baseImageSize.width) {\n\t\t\tthis.props.openModal(\n\t\t\t\tMODALS.addMoreImageAlert,\n\t\t\t\t{\n\t\t\t\t\txtraImageSize,\n\t\t\t\t\tbaseImageSize,\n\t\t\t\t}\n\t\t\t)\n\t\t} else {\n\t\t\tthis.finallyAddEditedImage()\n\t\t}\n\t}\n\tfinallyAddEditedImage() {\n\t\tconst data = this.xtraImageEditorRef.current.imageEditor.current.imageEditorInst.toDataURL()\n\t\tthis.baseImageEditorRef.current.imageEditor.current.imageEditorInst.addImageObject(data)\n\t\tthis.closeModal()\n\t\t\tthis.props.showHideXtraEditor(false)\n\t}\n\n\tgetXtraImageAlertJSX(xtraImageSize, baseImageSize) {\n\t\treturn (\n\t\t\t<MDBModalBody className=\"text-center\">\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBRow>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<MDBIcon icon=\"exclamation-triangle\" className=\"text-color-yellow\"/>\n\t\t\t\t\t\t\t<strong><i> You are going to overflow the cream on your cone</i></strong>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tI mean, the edited image {`(${xtraImageSize.width}x${xtraImageSize.height})`}\n\t\t\t\t\t\t\tis still bigger than the bottom canvas {`(${baseImageSize.width}x${baseImageSize.height})`}. \n\t\t\t\t\t\t\tYou may find it difficult in handling. \n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div><strong>Tips if you continue:</strong></div>\n\t\t\t\t\t\t<ul className=\"text-left\">\n\t\t\t\t\t\t\t<li>Drag down the bigger image to find its corner and resize it</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<i>Undo</i> one-by-one\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\tSelect &amp; <i>Delete</i> one-by-one\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t(<i>Worst case</i>) Restart with bigger bottom image\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</MDBRow>\n\t\t\t\t</MDBContainer>\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBBtn color=\"default\" onClick={this.finallyAddEditedImage.bind(this)}>\n\t\t\t\t\t\t<span>Add it anyway</span>\n\t\t\t\t\t\t<MDBIcon icon=\"check\" className=\"text-color-green ml-2\"/>\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t<MDBBtn color=\"secondary\" onClick={this.closeModal.bind(this)}>\n\t\t\t\t\t\t<span>Stop! Let me crop more</span>\n\t\t\t\t\t\t<MDBIcon icon=\"times\" className=\"text-color-red ml-2\" />\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t</MDBContainer>\n\t\t\t</MDBModalBody>\n\n\t\t)\n\t}\n\tgetImageLoadFailJSX(imageSize) {\n\t\tconst msgContent = `The image is not able to load due to ${\n\t\t\timageSize\n\t\t\t?\n\t\t\t\t'upload size limit 6 MB'\n\t\t\t:\n\t\t\t\t'some server error'\n\t\t}.`\n\t\treturn (\n\t\t\t<MDBModalBody className=\"text-center\">\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBRow>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<MDBIcon icon=\"exclamation-triangle\" className=\"text-color-red\"/>\n\t\t\t\t\t\t\t<strong>Sorry! <i>{msgContent}</i></strong>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</MDBRow>\n\t\t\t\t</MDBContainer>\n\t\t\t\t<MDBContainer>\n\t\t\t\t\t<MDBBtn color=\"secondary\" onClick={this.closeModal.bind(this)}>Close</MDBBtn>\n\t\t\t\t</MDBContainer>\n\t\t\t</MDBModalBody>\n\t\t)\n\t}\n\tgetXtraImageEditorJSX(xtraImageloading, showXtraEditor, xtraImageURL, xtraEditorPosition) {\n\t\tconst dynamicClass = 'container-fluid p-0 ' + (showXtraEditor?'':' hidden')\n\t\treturn (\n\t\t\t<div id=\"xtra-image\" className={dynamicClass}>\n\t\t\t\t<h3 className=\"center pos-rel\">\n\t\t\t\t\t<label className=\"editor-title\">Edit </label>\n\t\t\t\t\t<label className=\"powered-text\">Powered by Toast UI Image Editor</label>\n\t\t\t\t\t<NavMenu\n\t\t\t\t\t\teditorName={XTRA}\n\t\t\t\t\t\tref={this.xtraNavMenuRef}\n\t\t\t\t\t/>\n\t\t\t\t</h3>\n\t\t\t\t<div className=\"load-download\">\n\t\t\t\t\t<MDBBtn title=\"Add this image\" className=\"btn-round\" circle color=\"white\"\n\t\t\t\t\t\tonClick={this.checkCanvasSize.bind(this)} >\n\t\t\t\t\t\t<MDBIcon icon=\"check\" size=\"2x\" className=\"text-color-green\" />\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t<MDBBtn onClick={this.props.showHideXtraEditor.bind(this, false)} className=\"btn-round\" circle color=\"white\" title=\"Cancel\">\n\t\t\t\t\t\t<MDBIcon icon=\"times\" size=\"2x\" className=\"text-color-red\" />\n\t\t\t\t\t</MDBBtn>\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\txtraImageloading\n\t\t\t\t\t?\n\t\t\t\t\t\t<Loader icon={'spinner'} pulse={true} />\n\t\t\t\t\t:\t\t\t\t\t\n\t\t\t\t\t\t<ImageEditorWrapper\n\t\t\t\t\t\t\tcomponentId={XTRA}\n\t\t\t\t\t\t\tref={this.xtraImageEditorRef}\n\t\t\t\t\t\t\tselectedImageURL={xtraImageURL}\n\t\t\t\t\t\t\tmyTheme={imageEditorConfig.defaultTheme2}\n\t\t\t\t\t\t\tmenuBarPositionProp={xtraEditorPosition}\n\t\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n\n  \trender() {\n\t\tconst {\n\t\t\tisBaseImageLoaded,\n\t\t\tselectedImageURL,\n\t\t\tuseImageloading,\n\t\t\txtraImageloading,\n\t\t\tshowXtraEditor,\n\t\t\txtraImageURL,\n\t\t\txtraEditorPosition,\n\t\t\tbaseEditorPosition,\n\t\t} = this.props\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div id=\"cream-your-meme\"\n\t\t\t\t\tclassName={'container-fluid p-0 ' + (showXtraEditor?' hidden':'')}>\n\t\t\t\t\t<h3 className=\"center pos-rel\">\n\t\t\t\t\t\t<label className=\"editor-title\">Cream your meme</label>\n\t\t\t\t\t\t<label className=\"powered-text\">Powered by Toast UI Image Editor</label>\n\t\t\t\t\t\t<NavMenu\n\t\t\t\t\t\t\teditorName={BASE}\n\t\t\t\t\t\t\tref={this.baseNavMenuRef}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<div className=\"load-download\">\n\t\t\t\t\t\t<MDBBtn color=\"white\" circle className=\"btn-round\" title=\"Select Image\"\n\t\t\t\t\t\t\tonClick={this.browseImage.bind(this)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MDBIcon className=\"text-color-secondary\" icon=\"image\" size=\"2x\"/>\n\t\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t\t<MDBBtn color=\"white\" circle className=\"btn-round\" title=\"Add image\"\n\t\t\t\t\t\t\tonClick={()=>document.getElementById('addImage').click()} disabled={ isBaseImageLoaded ? null : true }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MDBIcon className=\"text-color-secondary\" icon=\"images\" size=\"2x\"/>\n\t\t\t\t\t\t\t<input className=\"hidden\" id=\"addImage\" type=\"file\" \n\t\t\t\t\t\t\t\tonChange={this.loadExtraEditor.bind(this)} accept=\"image/x-png,image/gif,image/jpeg\" />\n\t\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t\t<MDBBtn color=\"default\" circle className=\"btn-round\" title=\"Save to disk\"\n\t\t\t\t\t\t\tonClick={this.saveImageToDisk.bind(this)} disabled={ isBaseImageLoaded ? null : true } >\n\t\t\t\t\t\t\t<MDBIcon className=\"text-color-secondary\" icon=\"download\" size=\"2x\"/>\n\t\t\t\t\t\t</MDBBtn>\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\tuseImageloading\n\t\t\t\t\t\t?\n\t\t\t\t\t\t<Loader icon={'spinner'} pulse={true}  />\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<ImageEditorWrapper\n\t\t\t\t\t\t\tcomponentId={BASE}\n\t\t\t\t\t\t\tref={this.baseImageEditorRef}\n\t\t\t\t\t\t\tselectedImageURL={selectedImageURL}\n\t\t\t\t\t\t\tmenuBarPositionProp={baseEditorPosition}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.getXtraImageEditorJSX(xtraImageloading, showXtraEditor, xtraImageURL, xtraEditorPosition)\n\t\t\t\t}\n\t\t\t\t<ModalsAlerts \n\t\t\t\t\taddEditedImageFn={this.finallyAddEditedImage.bind(this)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default connect(\n  // mapStatesToProps\n\tstate => {\n\t\treturn {\n\t\t\tisBaseImageLoaded: state.reducerState.isBaseImageLoaded,\n\t\t\tselectedImageURL: state.reducerState.selectedImageURL,\n\t\t\tuseImageloading: state.reducerState.useImageloading,\n\t\t\txtraImageloading: state.reducerState.xtraImageloading,\n\t\t\topenModalName: state.reducerState.openModalName,\n\t\t\timageSize: state.reducerState.imageSize,\n\t\t\txtraImageSize: state.reducerState.xtraImageSize,\n\t\t\tbaseImageSize: state.reducerState.baseImageSize,\n\t\t\tshowXtraEditor: state.reducerState.showXtraEditor,\n\t\t\txtraImageURL: state.reducerState.xtraImageURL,\n\t\t\taddMoreImageAlertStates: state.reducerState.addMoreImageAlertStates,\n\t\t\timageLoadModalStates: state.reducerState.imageLoadModalStates,\n\t\t\txtraEditorPosition: state.reducerState.xtraEditorPosition,\n\t\t\tbaseEditorPosition: state.reducerState.baseEditorPosition,\n\t\t}\n  \t},\n  // mapDispatchToProps\n\tdispatch => {\n\t\treturn {\n\t\t\tcloseModal: () =>{\n\t\t\t\tdispatch(\n\t\t\t\t\tAppActions.openModal(\n\t\t\t\t\t\tINTENTIONAL_NULL_VALUE,\n\t\t\t\t\t\tINTENTIONAL_NULL_VALUE\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t},\n\t\t\topenModal: (\n\t\t\t\topenModalName,\n\t\t\t\tmodalStateObjects\n\t\t\t) => {\n\t\t\t\tdispatch(\n\t\t\t\t\tAppActions.openModal(\n\t\t\t\t\t\topenModalName,\n\t\t\t\t\t\tmodalStateObjects\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t},\n\t\t\tshowHideXtraEditor: (showXtraEditor) => {\n\t\t\t\tdispatch(\n\t\t\t\t\tAppActions.showHideXtraEditor(showXtraEditor)\n\t\t\t\t)\n\t\t\t},\n\t\t}\n\t}\n)(ImageEditorContainer);","const domainURL = 'http://localhost:3000'\nconst graphqlURL = 'http://localhost:4000/graphql?'\n\nconst SETTINGS = {\n    domainURL,\n    graphqlURL,\n}\n\nexport default SETTINGS","import React from 'react'\nimport { connect } from 'react-redux';\nimport { AppActions } from '../actions';\nimport { MDBIcon } from 'mdbreact'\nimport UTILS from '../utils/common-utils';\n\nclass GalleryImage extends React.Component {\n    getTruncateText(text) {\n       return UTILS.getTruncateText(text)\n    }\n\n    searchedImageClick(imageThumbnail, imageUrl, imageId, xtraImage) {\n        if (xtraImage) {\n            this.props.showHideXtraEditor(true)\n            UTILS.scrollToHiddenElementById('xtra-image')\n        } else {\n            this.props.showHideXtraEditor(false)\n            UTILS.scrollToHiddenElementById('cream-your-meme')\n        }\n        this.props.useImage(imageThumbnail, imageUrl, imageId, xtraImage)\n    }\n\n    render() {\n        const { imageThumbnail, imageUrl, imageTitle, imageId, selectedImageId, isBaseImageLoaded } = this.props\n        return (\n            <div id={imageId} className={\"image-div \" + (selectedImageId===imageId?' selected': '')}\n                title={this.getTruncateText(imageTitle)}\n                onClick={event => event.stopPropagation()}\n            >\n                <img src={imageThumbnail} alt=\"unavailable\"  />\n                <span className=\"image-title\">{this.getTruncateText(imageTitle)}</span>\n                <span className=\"actions\">\n                    <div className=\"hover-text\" onClick={this.searchedImageClick.bind(this, imageThumbnail, imageUrl, imageId, false)}>\n                        <MDBIcon icon=\"image\" />\n                        <span className=\"m-l-10\">Use as base image</span>\n                    </div>\n                    <div className={\"hover-text \" + (isBaseImageLoaded?'':' disabled')}\n                        onClick={ isBaseImageLoaded ? this.searchedImageClick.bind(this, imageThumbnail, imageUrl, imageId, true) : null}>\n                        <MDBIcon icon=\"images\" />\n                        <span className=\"m-l-10\">Add over existing</span>\n                    </div>\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => {\n        return {\n            selectedImageId: state.reducerState.selectedImageId,\n            isBaseImageLoaded: state.reducerState.isBaseImageLoaded,\n        }\n    },\n    \n    dispatch => {\n        return {\n            useImage: (imageThumbnail, imageUrl, imageId, xtraImage) => {\n                dispatch(AppActions.useImage(imageThumbnail, imageUrl, imageId, xtraImage))\n            },\n            showHideXtraEditor: (showXtraEditor) => {\n\t\t\t\tdispatch(\n\t\t\t\t\tAppActions.showHideXtraEditor(showXtraEditor)\n\t\t\t\t)\n\t\t\t},\n        }\n    }\n)(GalleryImage)","import React, { Component } from 'react'\nimport { MDBInput, MDBContainer, MDBRow, MDBCol, MDBBadge, MDBIcon, MDBBtn } from 'mdbreact'\nimport { connect } from 'react-redux';\nimport { AppActions } from '../actions';\nimport Loader from './Loader'\nimport GalleryImage from './GalleryImage';\n\nclass GoogleImageResult extends Component {\n\n    handleSearch = (event) => {\n        let searchString = event.target.value\n        if (searchString) {\n            this.props.updateSearchString(searchString)\n        }\n        var code = (event.keyCode ? event.keyCode : event.which);\n        if (code === 13) {\n            //call search api\n            this.props.getImageList()\n        }\n    }\n    noResultsJSX() {\n        return (\n            <div className=\"no-image-result\">\n                <MDBBadge color=\"light\" className=\"result-tags\">\n                    Result Found: 0\n                </MDBBadge>\n                <span>&nbsp; Try different search tags</span>\n            </div>\n        )\n    }\n    fetchPage(isNextPage) {\n        let currentPage = Number(this.props.options.page)\n        // parameter page is actually startIndex\n        const pageNo = isNextPage ? currentPage + 10 : currentPage - 10\n        this.props.updateSearchOptions({\n            page: pageNo,\n        })\n        //call search api\n        this.props.getImageList()\n    }\n    getSelectedFilterTagsJSX() {\n        const { options, resultCount} = this.props\n        return (\n            <div className=\"text-left filter\">\n                <MDBBtn size=\"sm\" circle className=\"btn-round result-tags\" color=\"blue\"\n                    onClick={this.fetchPage.bind(this, false)} disabled={options.page < 2 ? true : null}\n                >\n                    <MDBIcon icon=\"angle-double-left\" />\n                </MDBBtn>\n                <MDBBtn size=\"sm\" circle className=\"btn-round result-tags\" color=\"blue\"\n                    onClick={this.fetchPage.bind(this, true)}\n                >\n                    <MDBIcon icon=\"angle-double-right\" />\n                </MDBBtn>\n                <MDBBadge color=\"default\" className=\"text-capitalize result-tags\">\n                    Result Found: { resultCount }\n                </MDBBadge>\n                {\n                    options && Object.keys(options).map(key => {\n                        let pageNum = Math.ceil( options[key] / 10)\n                        let optionValue = key === 'page' ? pageNum : options[key]\n                    return <MDBBadge color=\"default\" key className=\"text-capitalize result-tags\">\n                            {`${key} : ${optionValue}`}\n                        </MDBBadge>\n                    })\n                }\n            </div>\n        )\n    }\n    getImageResultJSX() {\n        const {imageList } = this.props\n        return (\n            <div>\n                {this.getSelectedFilterTagsJSX()}\n                <div className=\"image-result-div flex-container\">\n                    { imageList\n                        && imageList.map( (result, index) => {\n                            const { url, thumbnail, snippet } = result\n                            return (    \n                                    <GalleryImage\n                                        key={index}\n                                        imageThumbnail={thumbnail}\n                                        imageUrl={url}\n                                        imageTitle={snippet}\n                                        imageId={index}\n                                    />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n    render() {\n        const {imageList, imageListloading } = this.props\n        return (\n            <div className=\"container-fluid p-0\">\n                <MDBContainer className=\"p-0\">\n                    <MDBRow>\n                        <MDBCol xl=\"12\" lg=\"12\" md=\"12\">\n                            <div className=\"pos-rel\">\n                                <label className=\"powered-text\">Powered by Google Custom Search</label>\n                            </div>\n                            <MDBInput label=\"Search with meme tags\" id=\"searchBox\" containerClass=\"mr-1\"\n                                onKeyUp={this.handleSearch.bind(this)}\n                                icon=\"search\" iconClass=\"float-right pos-rel cursor-pointer\" onIconClick={this.props.getImageList.bind(this)}\n                            />\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <MDBContainer id=\"searchResults\">\n                    {\n                        imageListloading\n                        ?\n                            <Loader icon={'spinner'} pulse={true} customClass=\"bg-none\" iconClass=\"text-color-black\"  />\n                        :\n                            imageList && imageList.length === 0\n                            ?\n                                this.noResultsJSX()\n                            :\n                                this.getImageResultJSX()\n                    }\n                </MDBContainer>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        imageList: state.reducerState.imageList,\n        imageListloading: state.reducerState.imageListloading,\n        resultCount: state.reducerState.resultCount,\n        options: state.reducerState.options,\n        useImageloading: state.reducerState.useImageloading,\n        searchString: state.reducerState.searchString,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getImageList: () =>{\n            dispatch(AppActions.getImageList())\n        },\n        updateSearchString: (searchString) => {\n            dispatch(AppActions.updateSearchString(searchString))\n        },\n        updateSearchOptions: (options) => {\n            dispatch(AppActions.updateSearchOptions(options))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleImageResult)","import React, { Component } from 'react';\n// import SpeechList from './components/SpeechList'\n// import AddSpeech from './components/AddSpeech'\nimport ImageEditorContainer from './components/ImageEditorContainer';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport SETTINGS from './settings'\n\n// css stylesheets\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './css/mdb-style.css';\nimport './css/App.css';\nimport GoogleImageResult from './components/GoogleImageResult';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: SETTINGS.graphqlURL\n})\n\nclass App extends Component {\n  \n\trender() {\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h2 className=\"text-center\"> Meme Team</h2>\n\t\t\t\t\t<GoogleImageResult />\n\t\t\t\t\t<ImageEditorContainer />\n\t\t\t\t\t{/* <SpeechList /> */}\n\t\t\t\t\t{/* <AddSpeech /> */}\n\t\t\t\t</div>\n\t\t\t</ApolloProvider>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './reduxStore';\n\nReactDOM.render(\n    <Provider  store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}